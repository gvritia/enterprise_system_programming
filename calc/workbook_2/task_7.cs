// №7
// Колонизация Марса
// Для освоения Марса требуется построить исследовательскую базу.
//     База должна состоять из n одинаковых модулей, каждый из которых
// представляет собой прямоугольник.
//     Каждый модуль представляет собой жилой отсек, который имеет
//     форму прямоугольника размером a × b метров. Для повышения
// надежности модулей инженеры должны добавить вокруг каждого
//     модуля слой дополнительной защиты. Толщина этого слоя должна
// составлять целое число метров, и все модули должны иметь одинаковую
//     толщину дополнительной защиты.
//     Модуль с защитой, толщина которой равна d метрам, будет иметь
//     форму прямоугольника размером (a + 2d) × (b + 2d) метров.
//     Все модули должны быть расположены на заранее подготовленном
// прямоугольном поле размером w × h метров. При этом они должны быть
//     организованы в виде регулярной сетки: их стороны должны быть
// параллельны сторонам поля, и модули должны быть ориентированы
// одинаково.
//     Требуется написать программу, которая по заданным количеству n
// и размеру модулей a и b, а также размеру поля h и w для их размещения,
//     определяет максимальную толщину слоя дополнительной защиты d,
//     который можно добавить к каждому модулю. (Все данные вводятся с
// клавиатуры).



using System;

class Program
{
    static void Main()
    {
        // Заранее заданные значения для тестирования
        int n = 11;
        int a = 2;
        int b = 2;
        int w = 21;
        int h = 25;
        
        Console.WriteLine($"n = {n}, a = {a}, b = {b}, w = {w}, h = {h}");
        
        int maxD = FindMaxProtectionThickness(n, a, b, w, h);
        Console.WriteLine($"Ответ d = {maxD}");
        
        // Дополнительные тестовые примеры
        Console.WriteLine("\nДополнительные примеры:");
        
        // Пример 2
        TestCase(11, 2, 3, 21, 25);
        
        // Пример 3
        TestCase(1, 1, 1, 10, 10);
        
        // Пример 4
        TestCase(4, 2, 3, 10, 10);
    }
    
    static void TestCase(int n, int a, int b, int w, int h)
    {
        int maxD = FindMaxProtectionThickness(n, a, b, w, h);
        Console.WriteLine($"n={n}, a={a}, b={b}, w={w}, h={h} -> d={maxD}");
    }
    
    static int FindMaxProtectionThickness(int n, int a, int b, int w, int h)
    {
        int maxD = 0;
        
        // Перебираем возможные значения d (толщины защиты)
        for (int d = 0; d <= Math.Min(w, h); d++)
        {
            // Размер модуля с защитой
            int moduleWidth = a + 2 * d;
            int moduleHeight = b + 2 * d;
            
            // Сколько модулей помещается по горизонтали и вертикали
            int modulesPerRow = w / moduleWidth;
            int modulesPerColumn = h / moduleHeight;
            
            // Общее количество модулей, которые помещаются
            int totalModules = modulesPerRow * modulesPerColumn;
            
            if (totalModules >= n)
            {
                maxD = d;
            }
            else
            {
                // Если не помещается, значит предыдущее значение было максимальным
                break;
            }
        }
        
        return maxD;
    }
}